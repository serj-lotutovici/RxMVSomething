apply plugin: 'idea'
apply plugin: 'com.android.application'
apply plugin: 'org.jetbrains.kotlin.android'
apply plugin: 'org.jetbrains.kotlin.kapt'

android {
  compileSdkVersion versions.androidSdk
  buildToolsVersion versions.androidBuildTools

  defaultConfig {
    applicationId 'com.serjltt.devfest.weather'
    testInstrumentationRunner 'com.serjltt.devfest.weather.FunctionalTestRunner'

    minSdkVersion versions.androidMinSdk
    targetSdkVersion versions.androidSdk
    versionCode 1
    versionName '1.0'
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_7
    targetCompatibility JavaVersion.VERSION_1_7
  }

  packagingOptions {
    exclude 'META-INF/DEPENDENCIES'
    exclude 'META-INF/NOTICE'
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/LICENSE.txt'
    exclude 'META-INF/NOTICE.txt'
    // workaround for bug https://code.google.com/p/android/issues/detail?id=195331
    exclude 'META-INF/maven/com.google.guava/guava/pom.properties'
    exclude 'META-INF/maven/com.google.guava/guava/pom.xml'
    // ignore rxjava meta data
    exclude 'META-INF/rxjava.properties'
  }

  lintOptions {
    checkReleaseBuilds true
    abortOnError true
    textReport true
    ignoreWarnings true

    disable 'GoogleAppIndexingWarning' // App does not have deep linking.
    disable 'InvalidPackage' // Okio references java.nio that does not presented in Android SDK.
  }

  // Make unit tests shine in the terminal
  testOptions.unitTests.all {
    testLogging {
      events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
    }
  }
}

dependencies {
  // We need some android support stuff
  compile libraries.supportV4
  compile libraries.supportRecyclerView
  compile libraries.supportAppCompat
  compile libraries.supportDesign

  // Some reactive view handling
  compile libraries.rxBindingKotlin
  compile libraries.rxBindingAppCompatKotlin

  compile 'com.github.pedrovgs:renderers:3.0.0'

  // Some DI for code beauty
  compile libraries.dagger
  kapt libraries.daggerCompiler
  kaptTest libraries.daggerCompiler
  kaptAndroidTest libraries.daggerCompiler

  // Some butterknife for view binding
  compile libraries.butterknife
  kapt libraries.butterknifeCompiler

  // Some reactive streams to make kittens happy
  compile libraries.rxjava
  compile libraries.rxandroid
  compile libraries.rxkotlin
  compile libraries.rxpreferences

  // Some ok libraries
  compile libraries.okhttp
  compile libraries.okhttpLoggingInterceptor
  compile libraries.retrofit
  compile libraries.retorfitRx2Adapter
  compile libraries.retrofitMoshiConverter
  compile libraries.moshi
  compile libraries.moshiLazyAdapters

  // Make unit testing simpler
  testCompile libraries.junit
  testCompile libraries.assertJ
  testCompile libraries.mockito
  testCompile libraries.okhttpMockServer

  // Some ui testing libs
  // Btw, I "love" how espresso and the support tests libs are packaged (why nobody uses 'provide'?)
  def uiTestLibs = [libraries.espresso,
                    libraries.espressoContrib,
                    libraries.supportTestRunner,
                    libraries.supportTestRules]

  uiTestLibs.each {
    // 'it' means lib, not the dancing clown :)
    androidTestCompile dependencies.create(it) {
      exclude group: 'com.android.support'
      force = true
    }
  }

  // Since the tests are going to be more functional then end to end,
  // we are going to mock the backend as we do in unit tests.
  androidTestCompile libraries.okhttpMockServer
}

idea {
  module {
    downloadJavadoc = true
    downloadSources = true
  }
}
